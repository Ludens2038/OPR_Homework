package at.fhooe.sail.Lambdas;

import at.fhhgb.mc.opr.backblazedata.model.HardDisk;

import java.util.Vector;

import at.fhhgb.mc.opr.backblazedata.loaders.HardDiskDataSource;
import at.fhhgb.mc.opr.backblazedata.loaders.LiveHardDiskDataSource;

public class MainClass {
	public static void main(String[] args) {
		HardDiskDataSource source = new LiveHardDiskDataSource();
		HardDisk disk;
		Vector<HardDisk> hardDisks = new Vector<>();

		while ((disk = source.next()) != null) {
			hardDisks.add(disk);
		}

		DataProcessorManual processor = new DataProcessorManual(hardDisks);

		// Count of drives in datacenter
		long driveCount = processor.count();
		System.out.println("Drive Count: " + driveCount);

		// Count of broken drives in datacenter
		long failedCount = processor.filter(hdd -> hdd.isFailing()).size();
		System.out.println("Failing Drives Count: " + failedCount);

		// drive with largest capacity
		HardDisk largestDrive = processor
				.max((hdd1, hdd2) -> Long.compare(hdd1.getCapacityInBytes(), hdd2.getCapacityInBytes()));
		System.out.println("Largest Drive: " + largestDrive);
	}
}
